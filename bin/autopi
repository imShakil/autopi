#!/usr/bin/python3

"""
@author: github@imshakil
"""

import sys
import time
import random
import subprocess
import configparser

if sys.version_info.major < 3:
    print("This script runs under python3")
    sys.exit()

missing_packages = ['scrot', 'python3-tk', 'python3-dev']


def packages():
    try:
        for package in missing_packages:
            subprocess.check_call(['apt-get', 'install', '-y', package])
    except IOError:
        print(IOError)
        sys.exit()


try:
    from tkinter import *
    from tkinter import ttk
    import pyautogui
except ImportError as e:
    packages()
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyautogui'])

from tkinter import *
from tkinter import ttk
import pyautogui as pyg

app = Tk()
app.geometry("400x300")
app.minsize(400, 300)
app.title('Python Stalker')
text_box = Text(app, height=30, width=300)
running = False

# Config Parse
config = configparser.ConfigParser()
config.read('../config.ini')

# Mouse Movement
mouse_movement = config['MouseMovement']['allow']

# Page Scroll
page_scroll = config['PageScroll']['allow']

# Mouse Click
mouse_click = config['MouseClick']['allow']

# Tab Switching
switching = config['SwitchingTabs']['allow']

# Reloading Tab
reload_window = config['RefreshWindow']['allow']


def popup(msg):
    text_box.pack()
    text_box.delete("1.0", "end")
    text_box.insert('end', msg)
    text_box.update()


def on_start():
    global running
    running = True
    popup("Program will be started soon.")
    popup("Program is running...")
    app.after(3000, auto_py)


def on_stop():
    global running
    running = False
    popup("Program has stopped.\nPress [START] to run again.")


def on_destroy():
    app.destroy()


def switch_tab():
    if not switching:
        return
    popup("Switching tabs...")
    time.sleep(1)
    pyg.hotkey('ctrl', 'tab')


def refresh_window():
    if not reload_window:
        return
    popup("Refreshing Window...")
    time.sleep(1)
    pyg.hotkey('f5')


def scroll_page():
    if not page_scroll:
        return
    popup("Scrolling Pages...")
    time.sleep(1)
    pyg.scroll(600, 700, 10)
    pyg.scroll(600, 700, -10)


def move_mouse(mm_time):
    if not mouse_movement:
        return
    popup("Moving mouse for " + str(mm_time) + " seconds")
    for i in range(0, mm_time):
        px, py = pyg.position()
        popup("Mouse position: (" + str(px) + ", " + str(py) + ")")
        px = 250 + (px + random.randint(0, 1600)) % 1600
        py = 150 + (py + random.randint(0, 800)) % 800
        popup("Mouse moving to: (" + str(px) + ", " + str(py) + ")")
        pyg.moveTo(px, py, 1)


def click_mouse():
    if not mouse_click:
        return
    popup('Mouse clicked')
    pyg.click(button='right')


def auto_py():
    st = time.time()
    active_time = config['DEFAULT']['ActiveTIme'] if config['DEFAULT']['ActiveTIme'] else random.randint(20, 40)
    m_time = config['MouseMovement']['mmTime'] if config['MouseMovement']['mmTime'] else random.randint(20, active_time)
    s_time = config['DEFAULT']['SleepTime'] if config['DEFAULT']['SleepTime'] else random.randint(10, 60 - active_time)
    if running:
        switch_tab()
        refresh_window()
        scroll_page()
        click_mouse()
        move_mouse(m_time)
        popup(
            'Looping...\nProgram will run again after ' + str(s_time) + ' seconds.\nPress [STOP] to stop the program.')
        pr = m_time + 1
        tt = time.time() - st
        tt = tt + s_time
        pr = (pr * 100) // tt
        for i in range(0, s_time - 1):
            popup('Activity Percentage: ' + str(pr) + "% \nProgram will be running back within " + str(
                s_time - i) + " seconds...")
            time.sleep(1)
            if not running:
                break

        app.after(1000, auto_py)


start = ttk.Button(app, text="start", command=on_start)
start.pack(padx=10, pady=10)

stop = ttk.Button(app, text="stop", command=on_stop)
stop.pack(padx=30, pady=10)

destroy = ttk.Button(app, text="Exit", command=on_destroy)
destroy.pack(padx=50, pady=10)

app.after(1000, auto_py)
app.mainloop()
