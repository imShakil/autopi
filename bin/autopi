#!/usr/bin/python3

"""
@author: github@imshakil
"""

import sys
import time
import random
import subprocess
import configparser

if sys.version_info.major < 3:
    print("This script runs under python3")
    sys.exit()

missing_packages = ['scrot', 'python3-tk', 'python3-dev']


def packages():
    try:
        for package in missing_packages:
            subprocess.check_call(['apt-get', 'install', '-y', package])
    except IOError:
        print(IOError)
        sys.exit()


try:
    from tkinter import *
    from tkinter import ttk
    import pyautogui
except ImportError as e:
    packages()
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyautogui'])

from tkinter import *
from tkinter import ttk
import pyautogui as pyg

app = Tk()
app.geometry("400x300")
app.minsize(400, 300)
app.title('Python Stalker')
text_box = Text(app, height=30, width=300)
running = False

# Config Parse
config = configparser.ConfigParser()
config.read('../config.ini')

mouse_movement = config.getboolean('MouseMovement', 'allow')
page_scroll = config.getboolean('PageScroll', 'allow')
mouse_click = config.getboolean('MouseClick', 'allow')
switching = config.getboolean('SwitchingTabs', 'allow')
reload_window = config.getboolean('RefreshWindow', 'allow')


def popup(msg):
    text_box.pack()
    text_box.delete("1.0", "end")
    text_box.insert('end', msg)
    text_box.update()


def on_start():
    global running
    running = True
    popup("Program will be started soon.")
    popup("Program is running...")
    app.after(3000, auto_py)


def on_stop():
    global running
    running = False
    popup("Program has stopped.\nPress [START] to run again.")


def on_destroy():
    app.destroy()


def switch_tab():
    if not switching:
        return
    popup("Switching tabs...")
    time.sleep(1)
    pyg.hotkey('ctrl', 'tab')


def refresh_window():
    if not reload_window:
        return
    popup("Refreshing Window...")
    time.sleep(1)
    pyg.hotkey('ctrl', 'R')


def scroll_page():
    if not page_scroll:
        return
    try:
        scroll_up = config.getint('PageScroll', 'ScrollUp')
        scroll_down = config.getint('PageScroll', 'ScrollDown')
    except ValueError:
        scroll_up, scroll_down = 15, -15
    popup("Scrolling Pages for " + str(scroll_up - scroll_down) + " clicks...")
    time.sleep(1)
    pyg.scroll(scroll_up)
    pyg.scroll(scroll_down)


def move_mouse(mm_time):
    if not mouse_movement:
        return
    mxs, mys = pyg.size()
    for i in range(0, mm_time):
        cpx, cpy = pyg.position()
        px = (cpx + random.randint(0, mxs)) % mxs
        py = (cpy + random.randint(0, mys)) % mys
        popup("Moving mouse for " + str(mm_time - i) + " seconds" +
              "\nMouse position: (" + str(cpx) + ", " + str(cpy) + ")" +
              "\nMouse moving to: (" + str(px) + ", " + str(py) + ")")
        pyg.moveTo(px, py, 1)


def click_mouse():
    if not mouse_click:
        return
    popup('Mouse clicked')
    try:
        btn = config.get('MouseClick', 'button')
        clicks = config.getint('MouseClick', 'clicks')
        interval = config.getfloat('MouseClick', 'interval')
    except ValueError:
        btn, clicks, interval = 'right', 2, .1
    pyg.click(button=btn, clicks=clicks, interval=interval)
    time.sleep(1)


def auto_py():
    try:
        active_time = min(config.getint('DEFAULT', 'ActiveTime'), 50)
    except ValueError:
        active_time = random.randint(30, 40)

    try:
        m_time = min(config.getint('MouseMovement', 'mmTime'), active_time - 10)
    except ValueError:
        m_time = random.randint(20, 30)

    s_time = 60 - active_time

    if running:
        switch_tab()
        refresh_window()
        scroll_page()
        click_mouse()
        move_mouse(m_time)
        popup(
            'Looping...\nProgram will run again after ' + str(s_time) + ' seconds.\nPress [STOP] to stop the program.')
        pr = (active_time * 100) // 60
        for i in range(0, s_time - 1):
            popup('Activity Percentage: ' + str(pr) + "% \nProgram will be running back within " + str(
                s_time - i) + " seconds...")
            time.sleep(1)
            if not running:
                break

        app.after(1000, auto_py)


start = ttk.Button(app, text="start", command=on_start)
start.pack(padx=10, pady=10)

stop = ttk.Button(app, text="stop", command=on_stop)
stop.pack(padx=30, pady=10)

destroy = ttk.Button(app, text="Exit", command=on_destroy)
destroy.pack(padx=50, pady=10)

app.after(1000, auto_py)
app.mainloop()
